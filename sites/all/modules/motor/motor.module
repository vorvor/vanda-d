<?php

function motor_menu() {
  $items = array();

  $items['add-event'] = array(
    'title' => 'Add event',
    'description' => 'Base functionality - add event.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('motor_form'),
    'access callback' => TRUE,
    'type'=>MENU_NORMAL_ITEM,
    'menu_name'=>'main-menu',
  );

  $items['add-todo'] = array(
    'title' => 'TODO',
    'description' => 'Add todo list item.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('motor_todo_form'),
    'access callback' => TRUE,
    'type'=>MENU_NORMAL_ITEM,
    'menu_name'=>'main-menu',
  );

  $items['ajax/pass-todo/%/%'] = array(
    'title' => 'TODO',
    'description' => 'Add todo list item.',
    'page callback' => 'motor_pass_todo',
    'page arguments' => array(2,3),
    'access callback' => TRUE,
    'type'=>MENU_NORMAL_ITEM,
    'menu_name'=>'main-menu',
  );

  return $items;
}

function motor_cron() {
  global $user;

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'todo')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_per_day', 'value', '1', '=')
    ->fieldCondition('field_status', 'value', '1', '=')
    ->addMetaData('account', user_load(1));

  $result = $query->execute();
  if (isset($result['node'])) {
    $node_nids = array_keys($result['node']);
    $nodes = entity_load('node', $node_nids);
    foreach ($nodes as $node) {
      $todos[] = $node->title . ' - ' . $node->field_deadline[LANGUAGE_NONE][0]['value'];
    }

  $message = implode(', <br />', $todos);;
  $params = array(
           'body' => $message,
           'subject' => 'daily todo',
           'headers'=>'simple',
     );
     $to = "vorosborisz@gmail.com";
    drupal_mail('motor', 'send_link', $to, language_default(), $params, 'demo@demo.com', TRUE);
  } 
}

function motor_form($form, &$form_state) {
	
	//drupal_add_js('https://code.jquery.com/jquery-1.12.3.min.js', 'external');
	drupal_add_js('http://momentjs.com/downloads/moment-with-locales.min.js', 'external');
  //drupal_add_js('https://code.jquery.com/ui/1.12.1/jquery-ui.js', 'external');
  //drupal_add_js('sites/all/libraries/jquery.ui.touch-punch/js/jquery.ui.touch-punch.min.js', 'header');
  //drupal_add_js('https://code.jquery.com/ui/1.12.1/jquery-ui.js', 'external');


  
	
	
	//drupal_add_js(drupal_get_path('module', 'motor') . '/motor.js');
  //drupal_add_js(drupal_get_path('module', 'motor') . '/js/bootstrap-material-datetimepicker.js');

  drupal_add_css('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css', 'external');
  drupal_add_css('https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css', 'external');
  //drupal_add_css(drupal_get_path('module', 'motor') . '/js/bootstrap-material-datetimepicker.css');



  
  $form['time'] = array(
    '#type'=>'textfield',
    '#required' => TRUE,
    '#attributes' => array('id' => array('time')),
  );

  $form['time_buttons'] = array(
    '#markup'=>'<div>
				<input type="button" value="-" class="change" data-val="-1" data-dest="time">
				<input type="button" value="+" class="change" data-val="1" data-dest="time"> 
        <input type="button" value="now" class="change" data-dest="time">
			</div>',
  );

  $form['hour_slider'] = array(
    '#markup' => '<div id="slider-hour">
      <div id="custom-handle" class="ui-slider-handle"></div>
    </div>',
  );

  $form['min_slider'] = array(
    '#markup' => '<div id="slider-min">
      <div id="custom-handle" class="ui-slider-handle"></div>
    </div>',
  );

  $form['amount'] = array(
    '#type'=>'textfield',
    '#required' => TRUE,
    '#attributes' => array('id' => array('amount'), 'data-default' => array(1)),
  );

  $form['amount_buttons'] = array(
    '#markup'=> '<div>
				<input type="button" value="-10" class="change" data-val="-10" data-dest="amount">
				<input type="button" value="-1" class="change" data-val="-1" data-dest="amount">
				<input type="button" value="+1" class="change" data-val="1" data-dest="amount"> 
				<input type="button" value="+10" class="change" data-val="10" data-dest="amount">
				<input type="button" value="+100" class="change" data-val="100" data-dest="amount">
        <input type="button" value="+1000" class="change" data-val="1000" data-dest="amount">
				<input type="button" value="reset" class="reset" data-dest="amount">
			</div>',
  );

  $form['event'] = array(
    '#type'=>'textfield',
    '#required' => TRUE,
    '#attributes' => array('id' => array('event')),
  );

  $form['event_tid'] = array(
    '#type'=>'hidden',
    '#attributes' => array('id' => array('event-tid')),
  );

  $vocabulary = taxonomy_vocabulary_machine_name_load('events');
  $terms = entity_load('taxonomy_term', FALSE, array('vid' => $vocabulary->vid));

  $output = '';
  foreach ($terms as $term) {
    $output .= '<input type="button" value="" class="change-event" data-tid="'  . $term->tid .  '" data-val="' . $term->name . '" data-dest="event">';
  }

  $form['event_buttons'] = array(
    '#markup'=> '<div>' . $output . '<input type="button" value="" class="change-event" data-val="egyéb" data-dest="event"></div>',
  );


  $form['submit'] = array(
    '#type'=>'submit',
    '#value'=>t('Save!'),
  );

  

  $form['#attached']['js'][] = array(
    'data' => 'https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js',
    'type' => 'file', 
  );

  $form['#attached']['js'][] = array(
    'data' => 'https://code.jquery.com/ui/1.12.1/jquery-ui.js',
    'type' => 'file', 
  );
  
  $form['#attached']['js'][] = array(
    'data' => drupal_get_path('module', 'motor') . '/js/jquery.ui.touch-punch.min.js',
    'type' => 'file', 
  );

  $form['#attached']['js'][] = array(
    'data' => drupal_get_path('module', 'motor') . '/js/bootstrap-material-datetimepicker.js',
    'type' => 'file', 
  );

  $form['#attached']['js'][] = array(
    'data' => drupal_get_path('module', 'motor') . '/motor.js',
    'type' => 'file', 
  );

  

  return $form;
}

function form_example_form_validate($form, &$form_state) {
}

function motor_form_submit($form, &$form_state) {
	$values = array(
    'type' => 'event',
    'uid' => 1,
    'status' => 1,
    'comment' => 1,
    'promote' => 0,
  );

  $entity = entity_create('node', $values);
  $ewrapper = entity_metadata_wrapper('node', $entity);

  //$ewrapper->title->set($desc_ass['title']);
  $ewrapper->title->set('test');
  $ewrapper->field_datetime->set(strtotime(date('Y-m-d ') . $form_state['values']['time']));
  $ewrapper->field_amount->set($form_state['values']['amount']);
  if (!empty($form_state['values']['event_tid'])) {
    $ewrapper->field_event->set($form_state['values']['event_tid']);
  } else {
  	$term = new stdClass();
	$term->name = $form_state['values']['event'];
	$vocabulary = taxonomy_vocabulary_machine_name_load('events');
	$term->vid = $vocabulary->vid;
	taxonomy_term_save($term);
  	$ewrapper->field_event->set($term->tid);
  }
  

  $nid = $ewrapper->save();
}

function motor_block_info() {
  $blocks = array();
  $blocks['charts'] = array(
    'info' => t('Charts'),
  );
  
  return $blocks;
}

function motor_block_view($delta='') {
  $block = array();
  
  switch($delta) {
    case 'charts' :
      $block['content'] = motor_charts();
      break;
  }
  
  return $block;
}

function motor_charts() {

  $output = '';
  
  $output .= motor_chart_by_event(array('Sns tej', 'táp', 'anyatej'));
  $output .= motor_chart_by_event('mérés');
  $output .= motor_chart_by_event('szájpenész');

  return $output;
}

function motor_chart_by_event($event) {

  $output = '';
  if (is_array($event)) {
    foreach ($event as $item) {
      $term = taxonomy_get_term_by_name($item);
      $term = reset($term);
      $tids[] = $term->tid;
      $names[] = $term->name;
    }
    $efilter = implode('+', $tids);
    $label = implode(', ', $names);
  }
  else {
    $term = taxonomy_get_term_by_name($event);
    $term = reset($term);
    $efilter = $term->tid;
    $label = $term->name;
  }

  $rows = views_get_view_result('event_chart', 'block', $efilter);

  $data = [];
  $max = 0;
  foreach ($rows as $row) {
    $key = date('Y-m-d', $row->field_field_datetime[0]['raw']['value']);
    if (isset($data[$key]) && $event !== "mérés") {
      $data[$key] += $row->field_field_amount[0]['raw']['value'];
    }    
    else {
      $data[$key] = $row->field_field_amount[0]['raw']['value'];
    }
    if ($data[$key] > $max) {
      $max = $data[$key];
    }
  }

  $e = 100 / $max;

  $output = '<div style="margin-top: 150px"><h2>' . $label . '</h2>';
  foreach ($data as $date=>$amount) {
    $block = '<div class="cblock">
      <div class="cblock-top">
        <div class="cblock-bar" style="height:' . ($amount * $e) . 'px"><span>' . $amount . '</span></div>
      </div>
      <div class="cblock-bottom"><span>' . $date . '</span></div>
    </div>';

    $output .= $block;
  }
  $output .= '</div><div style="clear:both"></div>';

  return $output;
}

function motor_todo_form($form, &$form_state) {
  
  $form['title'] = array(
    '#type'=>'textfield',
    '#required' => TRUE,
    '#attributes' => array('id' => array('title')),
  );

  $form['daily'] = array(
    '#title'=>'Daily',
    '#type'=>'checkbox',
  );

  $form['datetime'] = array(
    '#type' => 'date_popup',
    // Use 'timepicker' option provided by the Date Popup Timepicker module.
    // #timepicker property itself is provided by the Date Popup module.
    '#timepicker' => 'timepicker',
    // New #timepicker_options property handled by the Date Popup Timepicker
    // module and lets to customize timepicker options.
    '#timepicker_options' => array(
      'rows' => 6,
      'minutes' => array(
        'starts' => 0,
        'ends' => 56,
        'interval' => 4,
      ),
      'showCloseButton' => TRUE,
      'closeButtonText' => t('Close'),
    ),
  );

  $form['submit'] = array(
    '#type'=>'submit',
    '#value'=>t('Save!'),
  );

  $form['#attached']['js'][] = array(
    'data' => drupal_get_path('module', 'motor') . '/motor-todo.js',
    'type' => 'file', 
  );

  return $form;

}

function motor_todo_form_submit($form, &$form_state) {

  if (!empty($form_state['values']['title'])) {
    $values = array(
      'type' => 'todo',
      'uid' => 1,
      'status' => 1,
      'comment' => 1,
      'promote' => 0,
    );

    $entity = entity_create('node', $values);
    $ewrapper = entity_metadata_wrapper('node', $entity);

    $ewrapper->title->set($form_state['values']['title']);
    $ewrapper->field_per_day->set($form_state['values']['daily']);
    $ewrapper->field_deadline->set(strtotime($form_state['values']['datetime']));

    $nid = $ewrapper->save();
  }

  

}

function motor_mail($key,&$message,$params) 
{

       switch ($key) {
             case 'send_link':
                  $message['subject']=t($params['subject']);
                  $message['body'][]=$params['body'];
                  $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
       break;
          }
 }

function motor_pass_todo($nid, $state) {
  $entity = node_load($nid);
  $ewrapper = entity_metadata_wrapper('node', $entity);
  $ewrapper->field_status->set($state);
  $ewrapper->save(); 
}







